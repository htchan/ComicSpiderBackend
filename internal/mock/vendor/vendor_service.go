// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/WebHistory/internal/vendors (interfaces: VendorService)

// Package mockvendor is a generated GoMock package.
package mockvendor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/htchan/WebHistory/internal/model"
)

// MockVendorService is a mock of VendorService interface.
type MockVendorService struct {
	ctrl     *gomock.Controller
	recorder *MockVendorServiceMockRecorder
}

// MockVendorServiceMockRecorder is the mock recorder for MockVendorService.
type MockVendorServiceMockRecorder struct {
	mock *MockVendorService
}

// NewMockVendorService creates a new mock instance.
func NewMockVendorService(ctrl *gomock.Controller) *MockVendorService {
	mock := &MockVendorService{ctrl: ctrl}
	mock.recorder = &MockVendorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVendorService) EXPECT() *MockVendorServiceMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockVendorService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockVendorServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVendorService)(nil).Name))
}

// Support mocks base method.
func (m *MockVendorService) Support(arg0 *model.Website) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Support", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Support indicates an expected call of Support.
func (mr *MockVendorServiceMockRecorder) Support(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Support", reflect.TypeOf((*MockVendorService)(nil).Support), arg0)
}

// Update mocks base method.
func (m *MockVendorService) Update(arg0 context.Context, arg1 *model.Website) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVendorServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVendorService)(nil).Update), arg0, arg1)
}
