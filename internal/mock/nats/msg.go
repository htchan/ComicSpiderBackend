// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/htchan/WebHistory/internal/tasks/nats (interfaces: NatsMsg)
//
// Generated by this command:
//
//	mockgen -destination=../../mock/nats/msg.go -package=mocknats . NatsMsg
//

// Package mocknats is a generated GoMock package.
package mocknats

import (
	context "context"
	reflect "reflect"
	time "time"

	nats "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockNatsMsg is a mock of NatsMsg interface.
type MockNatsMsg struct {
	ctrl     *gomock.Controller
	recorder *MockNatsMsgMockRecorder
	isgomock struct{}
}

// MockNatsMsgMockRecorder is the mock recorder for MockNatsMsg.
type MockNatsMsgMockRecorder struct {
	mock *MockNatsMsg
}

// NewMockNatsMsg creates a new mock instance.
func NewMockNatsMsg(ctrl *gomock.Controller) *MockNatsMsg {
	mock := &MockNatsMsg{ctrl: ctrl}
	mock.recorder = &MockNatsMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNatsMsg) EXPECT() *MockNatsMsgMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockNatsMsg) Ack() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockNatsMsgMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockNatsMsg)(nil).Ack))
}

// Data mocks base method.
func (m *MockNatsMsg) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockNatsMsgMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockNatsMsg)(nil).Data))
}

// DoubleAck mocks base method.
func (m *MockNatsMsg) DoubleAck(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoubleAck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoubleAck indicates an expected call of DoubleAck.
func (mr *MockNatsMsgMockRecorder) DoubleAck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubleAck", reflect.TypeOf((*MockNatsMsg)(nil).DoubleAck), arg0)
}

// Headers mocks base method.
func (m *MockNatsMsg) Headers() nats.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(nats.Header)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockNatsMsgMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockNatsMsg)(nil).Headers))
}

// InProgress mocks base method.
func (m *MockNatsMsg) InProgress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InProgress")
	ret0, _ := ret[0].(error)
	return ret0
}

// InProgress indicates an expected call of InProgress.
func (mr *MockNatsMsgMockRecorder) InProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProgress", reflect.TypeOf((*MockNatsMsg)(nil).InProgress))
}

// Metadata mocks base method.
func (m *MockNatsMsg) Metadata() (*jetstream.MsgMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(*jetstream.MsgMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockNatsMsgMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockNatsMsg)(nil).Metadata))
}

// Nak mocks base method.
func (m *MockNatsMsg) Nak() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nak")
	ret0, _ := ret[0].(error)
	return ret0
}

// Nak indicates an expected call of Nak.
func (mr *MockNatsMsgMockRecorder) Nak() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nak", reflect.TypeOf((*MockNatsMsg)(nil).Nak))
}

// NakWithDelay mocks base method.
func (m *MockNatsMsg) NakWithDelay(delay time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NakWithDelay", delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// NakWithDelay indicates an expected call of NakWithDelay.
func (mr *MockNatsMsgMockRecorder) NakWithDelay(delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NakWithDelay", reflect.TypeOf((*MockNatsMsg)(nil).NakWithDelay), delay)
}

// Reply mocks base method.
func (m *MockNatsMsg) Reply() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply")
	ret0, _ := ret[0].(string)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockNatsMsgMockRecorder) Reply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockNatsMsg)(nil).Reply))
}

// Subject mocks base method.
func (m *MockNatsMsg) Subject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockNatsMsgMockRecorder) Subject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockNatsMsg)(nil).Subject))
}

// Term mocks base method.
func (m *MockNatsMsg) Term() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Term")
	ret0, _ := ret[0].(error)
	return ret0
}

// Term indicates an expected call of Term.
func (mr *MockNatsMsgMockRecorder) Term() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Term", reflect.TypeOf((*MockNatsMsg)(nil).Term))
}

// TermWithReason mocks base method.
func (m *MockNatsMsg) TermWithReason(reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TermWithReason", reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// TermWithReason indicates an expected call of TermWithReason.
func (mr *MockNatsMsgMockRecorder) TermWithReason(reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TermWithReason", reflect.TypeOf((*MockNatsMsg)(nil).TermWithReason), reason)
}
