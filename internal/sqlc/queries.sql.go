// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUserWebsite = `-- name: CreateUserWebsite :one
INSERT INTO user_websites
(user_uuid, website_uuid, access_time, group_name)
VALUES
($1, $2, $3, $4)
ON CONFLICT(user_uuid, website_uuid) DO
UPDATE SET user_uuid=$1, website_uuid=$2
RETURNing website_uuid, user_uuid, access_time, group_name
`

type CreateUserWebsiteParams struct {
	UserUuid    sql.NullString
	WebsiteUuid sql.NullString
	AccessTime  sql.NullTime
	GroupName   sql.NullString
}

func (q *Queries) CreateUserWebsite(ctx context.Context, arg CreateUserWebsiteParams) (UserWebsite, error) {
	row := q.db.QueryRowContext(ctx, createUserWebsite,
		arg.UserUuid,
		arg.WebsiteUuid,
		arg.AccessTime,
		arg.GroupName,
	)
	var i UserWebsite
	err := row.Scan(
		&i.WebsiteUuid,
		&i.UserUuid,
		&i.AccessTime,
		&i.GroupName,
	)
	return i, err
}

const createWebsite = `-- name: CreateWebsite :one
INSERT INTO websites
(uuid, url, title, content, update_time)
VALUES
($1, $2, $3, $4, $5)
ON CONFLICT (url) DO
UPDATE SET url=$2
RETURNING uuid, url, title, content, update_time, status
`

type CreateWebsiteParams struct {
	Uuid       sql.NullString
	Url        sql.NullString
	Title      sql.NullString
	Content    sql.NullString
	UpdateTime sql.NullTime
}

func (q *Queries) CreateWebsite(ctx context.Context, arg CreateWebsiteParams) (Website, error) {
	row := q.db.QueryRowContext(ctx, createWebsite,
		arg.Uuid,
		arg.Url,
		arg.Title,
		arg.Content,
		arg.UpdateTime,
	)
	var i Website
	err := row.Scan(
		&i.Uuid,
		&i.Url,
		&i.Title,
		&i.Content,
		&i.UpdateTime,
		&i.Status,
	)
	return i, err
}

const deleteUserWebsite = `-- name: DeleteUserWebsite :exec
DELETE FROM user_websites
where user_uuid=$1 and website_uuid=$2
`

type DeleteUserWebsiteParams struct {
	UserUuid    sql.NullString
	WebsiteUuid sql.NullString
}

func (q *Queries) DeleteUserWebsite(ctx context.Context, arg DeleteUserWebsiteParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserWebsite, arg.UserUuid, arg.WebsiteUuid)
	return err
}

const deleteWebsite = `-- name: DeleteWebsite :exec
DELETE FROM websites WHERE uuid=$1
`

func (q *Queries) DeleteWebsite(ctx context.Context, uuid sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteWebsite, uuid)
	return err
}

const getUserWebsite = `-- name: GetUserWebsite :one
SELECT website_uuid, user_uuid, access_time, group_name ,
uuid, url, title, update_time 
FROM user_websites JOIN websites ON user_websites.website_uuid=websites.uuid 
WHERE user_uuid=$1 and website_uuid=$2 and websites.status != 'inactive'
`

type GetUserWebsiteParams struct {
	UserUuid    sql.NullString
	WebsiteUuid sql.NullString
}

type GetUserWebsiteRow struct {
	WebsiteUuid sql.NullString
	UserUuid    sql.NullString
	AccessTime  sql.NullTime
	GroupName   sql.NullString
	Uuid        sql.NullString
	Url         sql.NullString
	Title       sql.NullString
	UpdateTime  sql.NullTime
}

func (q *Queries) GetUserWebsite(ctx context.Context, arg GetUserWebsiteParams) (GetUserWebsiteRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWebsite, arg.UserUuid, arg.WebsiteUuid)
	var i GetUserWebsiteRow
	err := row.Scan(
		&i.WebsiteUuid,
		&i.UserUuid,
		&i.AccessTime,
		&i.GroupName,
		&i.Uuid,
		&i.Url,
		&i.Title,
		&i.UpdateTime,
	)
	return i, err
}

const getWebsite = `-- name: GetWebsite :one
SELECT uuid, url, title, content, update_time, status from websites WHERE uuid=$1 and status != 'inactive'
`

func (q *Queries) GetWebsite(ctx context.Context, uuid sql.NullString) (Website, error) {
	row := q.db.QueryRowContext(ctx, getWebsite, uuid)
	var i Website
	err := row.Scan(
		&i.Uuid,
		&i.Url,
		&i.Title,
		&i.Content,
		&i.UpdateTime,
		&i.Status,
	)
	return i, err
}

const listActiveWebsites = `-- name: ListActiveWebsites :many
SELECT uuid, url, title, content, update_time, status FROM websites WHERE status='active'
`

func (q *Queries) ListActiveWebsites(ctx context.Context) ([]Website, error) {
	rows, err := q.db.QueryContext(ctx, listActiveWebsites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Website
	for rows.Next() {
		var i Website
		if err := rows.Scan(
			&i.Uuid,
			&i.Url,
			&i.Title,
			&i.Content,
			&i.UpdateTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserWebsites = `-- name: ListUserWebsites :many
SELECT website_uuid, user_uuid, access_time, group_name,
uuid, url, title, update_time 
FROM user_websites JOIN websites ON user_websites.website_uuid=websites.uuid 
WHERE user_uuid=$1 and websites.status != 'inactive'
ORDER BY (update_time > access_time) DESC, update_time DESC, access_time DESC
`

type ListUserWebsitesRow struct {
	WebsiteUuid sql.NullString
	UserUuid    sql.NullString
	AccessTime  sql.NullTime
	GroupName   sql.NullString
	Uuid        sql.NullString
	Url         sql.NullString
	Title       sql.NullString
	UpdateTime  sql.NullTime
}

func (q *Queries) ListUserWebsites(ctx context.Context, userUuid sql.NullString) ([]ListUserWebsitesRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserWebsites, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserWebsitesRow
	for rows.Next() {
		var i ListUserWebsitesRow
		if err := rows.Scan(
			&i.WebsiteUuid,
			&i.UserUuid,
			&i.AccessTime,
			&i.GroupName,
			&i.Uuid,
			&i.Url,
			&i.Title,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserWebsitesByGroup = `-- name: ListUserWebsitesByGroup :many
SELECT website_uuid, user_uuid, access_time, group_name ,
uuid, url, title, update_time 
FROM user_websites JOIN websites ON user_websites.website_uuid=websites.uuid 
WHERE user_uuid=$1 and group_name=$2 and websites.status != 'inactive'
`

type ListUserWebsitesByGroupParams struct {
	UserUuid  sql.NullString
	GroupName sql.NullString
}

type ListUserWebsitesByGroupRow struct {
	WebsiteUuid sql.NullString
	UserUuid    sql.NullString
	AccessTime  sql.NullTime
	GroupName   sql.NullString
	Uuid        sql.NullString
	Url         sql.NullString
	Title       sql.NullString
	UpdateTime  sql.NullTime
}

func (q *Queries) ListUserWebsitesByGroup(ctx context.Context, arg ListUserWebsitesByGroupParams) ([]ListUserWebsitesByGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserWebsitesByGroup, arg.UserUuid, arg.GroupName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserWebsitesByGroupRow
	for rows.Next() {
		var i ListUserWebsitesByGroupRow
		if err := rows.Scan(
			&i.WebsiteUuid,
			&i.UserUuid,
			&i.AccessTime,
			&i.GroupName,
			&i.Uuid,
			&i.Url,
			&i.Title,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserWebsite = `-- name: UpdateUserWebsite :one
UPDATE user_websites SET
access_time=$1, group_name=$2
WHERE user_uuid=$3 and website_uuid=$4
RETURNING website_uuid, user_uuid, access_time, group_name
`

type UpdateUserWebsiteParams struct {
	AccessTime  sql.NullTime
	GroupName   sql.NullString
	UserUuid    sql.NullString
	WebsiteUuid sql.NullString
}

func (q *Queries) UpdateUserWebsite(ctx context.Context, arg UpdateUserWebsiteParams) (UserWebsite, error) {
	row := q.db.QueryRowContext(ctx, updateUserWebsite,
		arg.AccessTime,
		arg.GroupName,
		arg.UserUuid,
		arg.WebsiteUuid,
	)
	var i UserWebsite
	err := row.Scan(
		&i.WebsiteUuid,
		&i.UserUuid,
		&i.AccessTime,
		&i.GroupName,
	)
	return i, err
}

const updateWebsite = `-- name: UpdateWebsite :one
UPDATE websites SET
url=$1, title=$2, content=$3, update_time=$4
WHERE uuid=$5
RETURNING uuid, url, title, content, update_time, status
`

type UpdateWebsiteParams struct {
	Url        sql.NullString
	Title      sql.NullString
	Content    sql.NullString
	UpdateTime sql.NullTime
	Uuid       sql.NullString
}

func (q *Queries) UpdateWebsite(ctx context.Context, arg UpdateWebsiteParams) (Website, error) {
	row := q.db.QueryRowContext(ctx, updateWebsite,
		arg.Url,
		arg.Title,
		arg.Content,
		arg.UpdateTime,
		arg.Uuid,
	)
	var i Website
	err := row.Scan(
		&i.Uuid,
		&i.Url,
		&i.Title,
		&i.Content,
		&i.UpdateTime,
		&i.Status,
	)
	return i, err
}
